name: Deploy (dev / preprod / prod)

on:
  push:
    branches:
      - dev
      - dev_hotfix
      - release
      - release_hotfix
      - main

permissions:
  contents: write   # cần để push tags
  id-token: write

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/dev_hotfix'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload artifact (for debug)
        uses: actions/upload-artifact@v4
        with:
          name: next-build-dev
          path: .next

      - name: Deploy to TEST via SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.TEST_SSH_PRIVATE_KEY }}
          TEST_USER: ${{ secrets.TEST_SSH_USER }}
          TEST_HOST: ${{ secrets.TEST_SSH_HOST }}
          TEST_PATH: ${{ secrets.TEST_DEPLOY_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $TEST_USER@$TEST_HOST "mkdir -p $TEST_PATH"
          rsync -avz --delete .next package.json package-lock.json $TEST_USER@$TEST_HOST:$TEST_PATH/
          ssh $TEST_USER@$TEST_HOST "cd $TEST_PATH && npm ci --production && pm2 restart next || pm2 start npm --name next -- start"

  deploy-preprod:
    if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/release_hotfix'
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install & Build
        run: |
          npm ci
          npm run build

      - name: Create preprod tag
        id: tagpre
        run: |
          # create timestamped tag, e.g. v20250914-1400-abcdef
          SHORT=$(git rev-parse --short HEAD)
          TAG="preprod-$(date -u +%Y%m%d-%H%M)-$SHORT"
          git tag $TAG
          git push origin $TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build-preprod
          path: .next

      - name: Deploy to PREPROD via SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PREPROD_SSH_PRIVATE_KEY }}
          PREPROD_USER: ${{ secrets.PREPROD_SSH_USER }}
          PREPROD_HOST: ${{ secrets.PREPROD_SSH_HOST }}
          PREPROD_PATH: ${{ secrets.PREPROD_DEPLOY_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          rsync -avz --delete .next package.json package-lock.json $PREPROD_USER@$PREPROD_HOST:$PREPROD_PATH/
          ssh $PREPROD_USER@$PREPROD_HOST "cd $PREPROD_PATH && npm ci --production && pm2 restart next || pm2 start npm --name next -- start"

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy-preprod
    outputs:
      deployed_commit: ${{ steps.getsha.outputs.sha }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit sha
        id: getsha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install & Build
        run: |
          npm ci
          npm run build

      - name: Create prod tag
        id: tagprod
        run: |
          SHORT=$(git rev-parse --short HEAD)
          TAG="prod-$(date -u +%Y%m%d-%H%M)-$SHORT"
          git tag $TAG
          git push origin $TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build-prod
          path: .next

      - name: Deploy to PROD via SSH (this step may fail => triggers rollback job)
        id: deploy_prod
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          PROD_USER: ${{ secrets.PROD_SSH_USER }}
          PROD_HOST: ${{ secrets.PROD_SSH_HOST }}
          PROD_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          set -o pipefail
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          rsync -avz --delete .next package.json package-lock.json $PROD_USER@$PROD_HOST:$PROD_PATH/ | tee rsync.log
          # example remote restart (can fail if remote has issues)
          ssh $PROD_USER@$PROD_HOST "cd $PROD_PATH && npm ci --production && pm2 restart next || pm2 start npm --name next -- start"
